/**
 * @file
 *
 * @author Hendrix Demers <hendrix.demers@mail.mcgill.ca>
 * @copyright 2022
 */

//   Copyright 2022 Hendrix Demers
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

// C system headers
// C++ system header
#include <string>
#include <map>
// Library headers
// Precompiled header
// Current declaration header file of this implementation file.
#include "constants/element.h"
// Project headers
// Project private headers

// Global and constant variables/functions.

namespace monte_carlo::constants::element {

std::string get_symbol(int atomic_number)
{
    static const std::map<const int, const std::string> symbols{
        std::pair(1, "H"),
        std::pair(2, "He"),
        std::pair(3, "Li"),
        std::pair(4, "Be"),
        std::pair(5, "B"),
        std::pair(6, "C"),
        std::pair(7, "N"),
        std::pair(8, "O"),
        std::pair(9, "F"),
        std::pair(10, "Ne"),
        std::pair(11, "Na"),
        std::pair(12, "Mg"),
        std::pair(13, "Al"),
        std::pair(14, "Si"),
        std::pair(15, "P"),
        std::pair(16, "S"),
        std::pair(17, "Cl"),
        std::pair(18, "Ar"),
        std::pair(19, "K"),
        std::pair(20, "Ca"),
        std::pair(21, "Sc"),
        std::pair(22, "Ti"),
        std::pair(23, "V"),
        std::pair(24, "Cr"),
        std::pair(25, "Mn"),
        std::pair(26, "Fe"),
        std::pair(27, "Co"),
        std::pair(28, "Ni"),
        std::pair(29, "Cu"),
        std::pair(30, "Zn"),
        std::pair(31, "Ga"),
        std::pair(32, "Ge"),
        std::pair(33, "As"),
        std::pair(34, "Se"),
        std::pair(35, "Br"),
        std::pair(36, "Kr"),
        std::pair(37, "Rb"),
        std::pair(38, "Sr"),
        std::pair(39, "Y"),
        std::pair(40, "Zr"),
        std::pair(41, "Nb"),
        std::pair(42, "Mo"),
        std::pair(43, "Tc"),
        std::pair(44, "Ru"),
        std::pair(45, "Rh"),
        std::pair(46, "Pd"),
        std::pair(47, "Ag"),
        std::pair(48, "Cd"),
        std::pair(49, "In"),
        std::pair(50, "Sn"),
        std::pair(51, "Sb"),
        std::pair(52, "Te"),
        std::pair(53, "I"),
        std::pair(54, "Xe"),
        std::pair(55, "Cs"),
        std::pair(56, "Ba"),
        std::pair(57, "La"),
        std::pair(58, "Ce"),
        std::pair(59, "Pr"),
        std::pair(60, "Nd"),
        std::pair(61, "Pm"),
        std::pair(62, "Sm"),
        std::pair(63, "Eu"),
        std::pair(64, "Gd"),
        std::pair(65, "Tb"),
        std::pair(66, "Dy"),
        std::pair(67, "Ho"),
        std::pair(68, "Er"),
        std::pair(69, "Tm"),
        std::pair(70, "Yb"),
        std::pair(71, "Lu"),
        std::pair(72, "Hf"),
        std::pair(73, "Ta"),
        std::pair(74, "W"),
        std::pair(75, "Re"),
        std::pair(76, "Os"),
        std::pair(77, "Ir"),
        std::pair(78, "Pt"),
        std::pair(79, "Au"),
        std::pair(80, "Hg"),
        std::pair(81, "Tl"),
        std::pair(82, "Pb"),
        std::pair(83, "Bi"),
        std::pair(84, "Po"),
        std::pair(85, "At"),
        std::pair(86, "Rn"),
        std::pair(87, "Fr"),
        std::pair(88, "Ra"),
        std::pair(89, "Ac"),
        std::pair(90, "Th"),
        std::pair(91, "Pa"),
        std::pair(92, "U"),
        std::pair(93, "Np"),
        std::pair(94, "Pu"),
        std::pair(95, "Am"),
        std::pair(96, "Cm"),
        std::pair(97, "Bk"),
        std::pair(98, "Cf"),
        std::pair(99, "Es"),
        std::pair(100, "Fm"),
        std::pair(101, "Md"),
        std::pair(102, "No"),
        std::pair(103, "Lr"),
        std::pair(104, "Rf"),
        std::pair(105, "Db"),
        std::pair(106, "Sg")
    };

    return symbols.at(atomic_number);
}

std::string get_name(int atomic_number)
{
    static const std::map<const int, const std::string> names{
        std::pair(1, "Hydrogen"),
        std::pair(2, "Helium"),
        std::pair(3, "Lithium"),
        std::pair(4, "Beryllium"),
        std::pair(5, "Boron"),
        std::pair(6, "Carbon"),
        std::pair(7, "Nitrogen"),
        std::pair(8, "Oxygen"),
        std::pair(9, "Fluorine"),
        std::pair(10, "Neon"),
        std::pair(11, "Sodium"),
        std::pair(12, "Magnesium"),
        std::pair(13, "Aluminium"),
        std::pair(14, "Silicon"),
        std::pair(15, "Phosphorus"),
        std::pair(16, "Sulfur"),
        std::pair(17, "Chlorine"),
        std::pair(18, "Argon"),
        std::pair(19, "Potassium"),
        std::pair(20, "Calcium"),
        std::pair(21, "Scandium"),
        std::pair(22, "Titanium"),
        std::pair(23, "Vanadium"),
        std::pair(24, "Chromium"),
        std::pair(25, "Manganese"),
        std::pair(26, "Iron"),
        std::pair(27, "Cobalt"),
        std::pair(28, "Nickel"),
        std::pair(29, "Copper"),
        std::pair(30, "Zinc"),
        std::pair(31, "Gallium"),
        std::pair(32, "Germanium"),
        std::pair(33, "Arsenic"),
        std::pair(34, "Selenium"),
        std::pair(35, "Bromine"),
        std::pair(36, "Krypton"),
        std::pair(37, "Rubidium"),
        std::pair(38, "Strontium"),
        std::pair(39, "Yttrium"),
        std::pair(40, "Zirconium"),
        std::pair(41, "Niobium"),
        std::pair(42, "Molybdenum"),
        std::pair(43, "Technetium"),
        std::pair(44, "Ruthenium"),
        std::pair(45, "Rhodium"),
        std::pair(46, "Palladium"),
        std::pair(47, "Silver"),
        std::pair(48, "Cadmium"),
        std::pair(49, "Indium"),
        std::pair(50, "Tin"),
        std::pair(51, "Antimony"),
        std::pair(52, "Tellurium"),
        std::pair(53, "Iodine"),
        std::pair(54, "Xenon"),
        std::pair(55, "Cesium"),
        std::pair(56, "Barium"),
        std::pair(57, "Lanthanum"),
        std::pair(58, "Cerium"),
        std::pair(59, "Praseodymium"),
        std::pair(60, "Neodymium"),
        std::pair(61, "Promethium"),
        std::pair(62, "Samarium"),
        std::pair(63, "Europium"),
        std::pair(64, "Gadolinium"),
        std::pair(65, "Terbium"),
        std::pair(66, "Dysprosium"),
        std::pair(67, "Holmium"),
        std::pair(68, "Erbium"),
        std::pair(69, "Thulium"),
        std::pair(70, "Ytterbium"),
        std::pair(71, "Lutetium"),
        std::pair(72, "Hafnium"),
        std::pair(73, "Tantalum"),
        std::pair(74, "Tungsten"),
        std::pair(75, "Rhenium"),
        std::pair(76, "Osmium"),
        std::pair(77, "Iridium"),
        std::pair(78, "Platinum"),
        std::pair(79, "Gold"),
        std::pair(80, "Mercury"),
        std::pair(81, "Thallium"),
        std::pair(82, "Lead"),
        std::pair(83, "Bismuth"),
        std::pair(84, "Polonium"),
        std::pair(85, "Astatine"),
        std::pair(86, "Radon"),
        std::pair(87, "Francium"),
        std::pair(88, "Radium"),
        std::pair(89, "Actinium"),
        std::pair(90, "Thorium"),
        std::pair(91, "Protactinium"),
        std::pair(92, "Uranium"),
        std::pair(93, "Neptunium"),
        std::pair(94, "Plutonium"),
        std::pair(95, "Americium"),
        std::pair(96, "Curium"),
        std::pair(97, "Berkelium"),
        std::pair(98, "Californium"),
        std::pair(99, "Einsteinium"),
        std::pair(100, "Fermium"),
        std::pair(101, "Mendelevium"),
        std::pair(102, "Nobelium"),
        std::pair(103, "Lawrencium"),
        std::pair(104, "Rutherfordium"),
        std::pair(105, "Dubnium"),
        std::pair(106, "Seaborgium")
    };

    return names.at(atomic_number);
}

double get_atomic_weight_g_mol(int atomic_number)
{
    static const std::map<const int, const double> atomic_weights_g_mol{
        { 1, 1.00794 },
        { 2, 4.002602 },
        { 3, 6.941 },
        { 4, 9.012182 },
        { 5, 10.811 },
        { 6, 12.0107 },
        { 7, 14.0067 },
        { 8, 15.9994 },
        { 9, 18.998403 },
        { 10, 20.1797 },
        { 11, 22.98976928 },
        { 12, 24.3050 },
        { 13, 26.9815386 },
        { 14, 28.0855 },
        { 15, 30.973762 },
        { 16, 32.065 },
        { 17, 35.453 },
        { 18, 39.948 },
        { 19, 39.0983 },
        { 20, 40.078 },
        { 21, 44.955912 },
        { 22, 47.867 },
        { 23, 50.9415 },
        { 24, 51.9961 },
        { 25, 54.938045 },
        { 26, 55.845 },
        { 27, 58.933195 },
        { 28, 58.6934 },
        { 29, 63.546 },
        { 30, 65.409 },
        { 31, 69.723 },
        { 32, 72.64 },
        { 33, 74.92160 },
        { 34, 78.96 },
        { 35, 79.904 },
        { 36, 83.798 },
        { 37, 85.4678 },
        { 38, 87.62 },
        { 39, 88.90585 },
        { 40, 91.224 },
        { 41, 92.90638 },
        { 42, 95.94 },
        { 43, 97.0 },
        { 44, 101.07 },
        { 45, 102.90550 },
        { 46, 106.42 },
        { 47, 107.8682 },
        { 48, 112.411 },
        { 49, 114.818 },
        { 50, 118.710 },
        { 51, 121.760 },
        { 52, 127.60 },
        { 53, 126.90447 },
        { 54, 131.293 },
        { 55, 132.9054519 },
        { 56, 137.327 },
        { 57, 138.90547 },
        { 58, 140.116 },
        { 59, 140.90765 },
        { 60, 144.242 },
        { 61, 145.0 },
        { 62, 150.36 },
        { 63, 151.964 },
        { 64, 157.25 },
        { 65, 158.92535 },
        { 66, 162.500 },
        { 67, 164.93032 },
        { 68, 167.259 },
        { 69, 168.93421 },
        { 70, 173.04 },
        { 71, 174.967 },
        { 72, 178.49 },
        { 73, 180.94788 },
        { 74, 183.84 },
        { 75, 186.207 },
        { 76, 190.23 },
        { 77, 192.217 },
        { 78, 195.084 },
        { 79, 196.966569 },
        { 80, 200.59 },
        { 81, 204.3833 },
        { 82, 207.2 },
        { 83, 208.98040 },
        { 84, 209.0 },
        { 85, 210.0 },
        { 86, 222.0 },
        { 87, 223.0 },
        { 88, 226.0 },
        { 89, 227.0 },
        { 90, 232.03806 },
        { 91, 231.03588 },
        { 92, 238.02891 },
        { 93, 237.0 },
        { 94, 244.0 },
        { 95, 243.0 },
        { 96, 247.0 },
        { 97, 247.0 },
        { 98, 251.0 },
        { 99, 252.0 },
        { 100, 257.0 },
        { 101, 258.0 },
        { 102, 259.0 },
        { 103, 266.0 },
        { 104, 267.0 },
        { 105, 268.0 },
        { 106, 269.0 }
    };

    return atomic_weights_g_mol.at(atomic_number);
}

double get_atomic_mass_density_g_cm3(int atomic_number)
{
    static const std::map<int, double> atomic_mass_density_g_cm3{
        { 1, 0.0899 },
        { 2, 0.1787 },
        { 3, 0.534 },
        { 4, 1.85 },
        { 5, 2.34 },
        { 6, 2.267 },
        { 7, 1.2510 },
        { 8, 1.4290 },
        { 9, 1.6960 },
        { 10, 0.9010 },
        { 11, 0.971 },
        { 12, 1.74 },
        { 13, 2.7 },
        { 14, 2.33 },
        { 15, 1.82 },
        { 16, 2.07 },
        { 17, 3.1700 },
        { 18, 1.7840 },
        { 19, 0.86 },
        { 20, 1.55 },
        { 21, 3.0 },
        { 22, 4.54 },
        { 23, 6.11 },
        { 24, 7.15 },
        { 25, 7.44 },
        { 26, 7.874 },
        { 27, 8.86 },
        { 28, 8.912 },
        { 29, 8.96 },
        { 30, 7.134 },
        { 31, 5.907 },
        { 32, 5.323 },
        { 33, 5.776 },
        { 34, 4.809 },
        { 35, 3.122 },
        { 36, 3.7400 },
        { 37, 1.532 },
        { 38, 2.64 },
        { 39, 4.469 },
        { 40, 6.506 },
        { 41, 8.57 },
        { 42, 10.22 },
        { 43, 11.5 },
        { 44, 12.37 },
        { 45, 12.41 },
        { 46, 12.02 },
        { 47, 10.501 },
        { 48, 8.69 },
        { 49, 7.31 },
        { 50, 7.287 },
        { 51, 6.685 },
        { 52, 6.232 },
        { 53, 4.93 },
        { 54, 5.8900 },
        { 55, 1.873 },
        { 56, 3.594 },
        { 57, 6.145 },
        { 58, 6.77 },
        { 59, 6.773 },
        { 60, 7.007 },
        { 61, 7.26 },
        { 62, 7.52 },
        { 63, 5.243 },
        { 64, 7.895 },
        { 65, 8.229 },
        { 66, 8.55 },
        { 67, 8.795 },
        { 68, 9.066 },
        { 69, 9.321 },
        { 70, 6.965 },
        { 71, 9.84 },
        { 72, 13.31 },
        { 73, 16.654 },
        { 74, 19.25 },
        { 75, 21.02 },
        { 76, 22.61 },
        { 77, 22.56 },
        { 78, 21.46 },
        { 79, 19.282 },
        { 80, 13.5336 },
        { 81, 11.85 },
        { 82, 11.342 },
        { 83, 9.807 },
        { 84, 9.32 },
        { 85, 7.0 },
        { 86, 9.91 },
        { 87, 1.87 },
        { 88, 5.5 },
        { 89, 10.07 },
        { 90, 11.72 },
        { 91, 15.37 },
        { 92, 18.95 },
        { 93, 20.45 },
        { 94, 19.84 },
        { 95, 13.69 },
        { 96, 13.51 },
        { 97, 14.79 },
        { 98, 15.1 },
        { 99, 8.84 },
        { 100, 9.7 },
        { 101, 10.3 },
        { 102, 9.9 },
        { 103, 15.6 },
        { 104, 23.2 },
        { 105, 29.3 },
        { 106, 35.0 }
    };

    return atomic_mass_density_g_cm3.at(atomic_number);
}

}// namespace monte_carlo::constants::element
