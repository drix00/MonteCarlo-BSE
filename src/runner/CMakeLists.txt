
set(runner_source_files)
foreach(item IN LISTS mcbse_source_files)
    set(runner_source_files ${runner_source_files} "../${item}")
endforeach()

list(LENGTH runner_source_files len)
message("Runner source files length = ${len}")

add_executable(run_serial_simple run_serial_simple.cpp ${runner_source_files})
target_link_libraries(run_serial_simple PRIVATE project_options project_warnings Threads::Threads CONAN_PKG::spdlog
        MonteCarlo-BSE_version)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(run_serial_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(run_serial_simple PRIVATE tbb)
endif()
target_include_directories(run_serial_simple PRIVATE ../../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(run_serial_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(run_async_simple run_async_simple.cpp ${runner_source_files})
target_link_libraries(run_async_simple PRIVATE project_options project_warnings Threads::Threads CONAN_PKG::spdlog
        MonteCarlo-BSE_version)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(run_async_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(run_async_simple PRIVATE tbb)
endif()
target_include_directories(run_async_simple PRIVATE ../../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(run_async_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(run_for_each_simple run_for_each_simple.cpp ${runner_source_files})
target_link_libraries(run_for_each_simple PRIVATE project_options project_warnings Threads::Threads CONAN_PKG::spdlog
        MonteCarlo-BSE_version)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(run_for_each_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(run_for_each_simple PRIVATE tbb)
endif()
target_include_directories(run_for_each_simple PRIVATE ../../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(run_for_each_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(run_valgrind run_valgrind.cpp ${runner_source_files})
target_link_libraries(run_valgrind PRIVATE project_options project_warnings Threads::Threads CONAN_PKG::spdlog
        MonteCarlo-BSE_version)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(run_valgrind  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(run_valgrind PRIVATE tbb)
endif()
target_include_directories(run_valgrind PRIVATE ../../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(run_valgrind  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(profile_serial_simple profile_serial_simple.cpp ${runner_source_files})
target_include_directories(profile_serial_simple PRIVATE ../../src)
target_link_libraries(profile_serial_simple PRIVATE project_options project_warnings Threads::Threads CONAN_PKG::spdlog
        MonteCarlo-BSE_version)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(profile_serial_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(profile_serial_simple PRIVATE tbb)
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(profile_serial_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()
