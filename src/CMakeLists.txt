# Simulate serial an simple code.
set(mcbse_source_files ../src/constants/element.cpp ../src/inputs/Input.cpp ../src/inputs/Element.cpp ../src/inputs/Element.h ../src/models/Rutherford.cpp ../src/models/Rutherford.h ../src/models/EnergyLoss.cpp ../src/models/EnergyLoss.h ../src/models/MeanFreePath.cpp ../src/models/MeanFreePath.h ../src/models/DirectionCosine.cpp ../src/models/DirectionCosine.h ../src/simulation/Simulation.cpp ../src/simulation/Simulation.h ../src/models/RandomNumber.cpp ../src/models/RandomNumber.h ../src/results/Statistic.cpp ../src/results/Statistic.h ../src/models/RandomSeed.cpp ../src/models/RandomSeed.h ../src/results/Counter.cpp ../src/results/Counter.h ../src/inputs.cpp ../src/inputs.h ../src/simulate.cpp ../src/simulate.h ../src/Data.cpp ../src/Data.h ../src/utilities/Timer.cpp ../src/utilities/Timer.h)

configure_file(version.cpp.in version.cpp @ONLY)
add_library(MonteCarlo-BSE_version STATIC ${CMAKE_CURRENT_BINARY_DIR}/version.cpp)
target_include_directories(MonteCarlo-BSE_version PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

add_executable(mcbse_console mcbse_console.cpp ${mcbse_source_files} version.h)
target_link_libraries(mcbse_console PRIVATE project_options project_warnings Threads::Threads CONAN_PKG::spdlog
        MonteCarlo-BSE_version)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(mcbse_console  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(mcbse_console PRIVATE tbb)
endif()
target_include_directories(mcbse_console PRIVATE ../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(mcbse_console  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(run_serial_simple run_serial_simple.cpp ${mcbse_source_files})
target_link_libraries(run_serial_simple PRIVATE project_options project_warnings Threads::Threads)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(run_serial_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(run_serial_simple PRIVATE tbb)
endif()
target_include_directories(run_serial_simple PRIVATE ../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(run_serial_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(run_async_simple run_async_simple.cpp ${mcbse_source_files})
target_link_libraries(run_async_simple PRIVATE project_options project_warnings Threads::Threads)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(run_async_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(run_async_simple PRIVATE tbb)
endif()
target_include_directories(run_async_simple PRIVATE ../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(run_async_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(run_for_each_simple run_for_each_simple.cpp ${mcbse_source_files})
target_link_libraries(run_for_each_simple PRIVATE project_options project_warnings Threads::Threads)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(run_for_each_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(run_for_each_simple PRIVATE tbb)
endif()
target_include_directories(run_for_each_simple PRIVATE ../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(run_for_each_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(run_valgrind run_valgrind.cpp ${mcbse_source_files})
target_link_libraries(run_valgrind PRIVATE project_options project_warnings Threads::Threads)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(run_valgrind  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(run_valgrind PRIVATE tbb)
endif()
target_include_directories(run_valgrind PRIVATE ../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(run_valgrind  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

add_executable(profile_serial_simple profile_serial_simple.cpp ${mcbse_source_files})
target_link_libraries(profile_serial_simple PRIVATE project_options project_warnings Threads::Threads)
if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_definitions(profile_serial_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_link_libraries(profile_serial_simple PRIVATE tbb)
endif()
target_include_directories(profile_serial_simple PRIVATE ../src)
if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    target_compile_definitions(profile_serial_simple  PRIVATE _CRT_SECURE_NO_WARNINGS)
endif()

if(CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC" AND CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    message("")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
    #set(CMAKE_CXX_FLAGS_RELEASE "-Ofast -DNDEBUG -mavx")
    message(${CMAKE_CXX_FLAGS_RELEASE})
endif()
